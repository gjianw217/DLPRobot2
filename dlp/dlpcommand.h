/*
* @file   头文件
* @brief  Custom  macro\enumeration\structure related to command
* @author GuoJianwei & gjianw217@163.com
*/
#ifndef DLP_DLP_DLPCOMMAND_H_
#define DLP_DLP_DLPCOMMAND_H_

#include <stdint.h>
#include "dlprobot.h"

#define CMDSIZE (10) //一次传递最大命令长度

/*定义枚举任务类型*/
typedef enum{

	SYS_TASK         =0x00,
	PAN_TASK       =0x01,
	TILT_TASK        =0x02,
	ZOOM_TASK         =0x03,
	FOCUS_TASK        =0x04,
	NDTASK           =-1
}TaskType;

/*
* coils                 read                       write
* discrete input        read
* input    registers    read
* holding  registers    read                       write
*
*/
/*定义枚举寄存器类型*/
typedef enum{
	MODBUS_COILS             =0,
	MODBUS_DISCRETE_INPUT    =1,
	MODBUS_INPUT_REGISTERS   =3,
	MODBUS_HOLDING_REGISTERS =4,
	NOREG=-1
}RegisterType;


typedef struct{
	DeviceType   dev_type;/*指定到具体的类*/
	FunctionType dev_func;/*指定到类的成员函数*/
	TaskType     task_type;/*分发到具体的任务中*/
	RegisterType reg_type;/*便于保存*/
	uint8_t      cmd_len;
	uint16_t     cmd_data[CMDSIZE];
}DLPModbusCmd;

/*定义写命令的4种方法*/
enum{
	MODBUS_WRITE_SINGLE_COIL        =0x05,
	MODBUS_WRITE_SINGLE_REGISTER    =0x06,
	MODBUS_WRITE_MULTIPLE_COILS     =0x0F,
	MODBUS_WRITE_MULTIPLE_REGISTERS =0x10
};

/*定义coils单元，在解析时使用*/
enum{
	MODBUS_COIL_TAB_BIT0=0x00,
	MODBUS_COIL_TAB_BIT1=0x01,
	MODBUS_COIL_TAB_BIT2=0x02,
	MODBUS_COIL_TAB_BIT3=0x03,
	MODBUS_COIL_TAB_BIT4=0x04,
	MODBUS_COIL_TAB_BIT5=0x05,
	MODBUS_COIL_TAB_BIT6=0x06,
	MODBUS_COIL_TAB_BIT7=0x07,
	MODBUS_COIL_TAB_BIT8=0x08,
	MODBUS_COIL_TAB_BIT9=0x09
};

/*定义holding registers单元，在解析时使用*/
enum{
	MODBUS_HOLD_TAB_REGISTER00=0x00,
	MODBUS_HOLD_TAB_REGISTER01=0x01,
	MODBUS_HOLD_TAB_REGISTER02=0x02,
	MODBUS_HOLD_TAB_REGISTER03=0x03,
	MODBUS_HOLD_TAB_REGISTER04=0x04,
	MODBUS_HOLD_TAB_REGISTER05=0x05,
	MODBUS_HOLD_TAB_REGISTER06=0x06,
	MODBUS_HOLD_TAB_REGISTER07=0x07,
	MODBUS_HOLD_TAB_REGISTER08=0x08,
	MODBUS_HOLD_TAB_REGISTER09=0x09,
	MODBUS_HOLD_TAB_REGISTER0A=0x0A,
	MODBUS_HOLD_TAB_REGISTER0B=0x0B,
	MODBUS_HOLD_TAB_REGISTER0C=0x0C,
	MODBUS_HOLD_TAB_REGISTER0D=0x0D,
	MODBUS_HOLD_TAB_REGISTER0E=0x0E,
	MODBUS_HOLD_TAB_REGISTER0F=0x0F,
	MODBUS_HOLD_TAB_REGISTER10=0x10,
	MODBUS_HOLD_TAB_REGISTER11=0x11,
	MODBUS_HOLD_TAB_REGISTER12=0x12,
	MODBUS_HOLD_TAB_REGISTER13=0x13,
	MODBUS_HOLD_TAB_REGISTER14=0x14,
	MODBUS_HOLD_TAB_REGISTER15=0x15,
	MODBUS_HOLD_TAB_REGISTER16=0x16,
	MODBUS_HOLD_TAB_REGISTER19=0x19,
	MODBUS_HOLD_TAB_REGISTER1E=0x1E,
	MODBUS_HOLD_TAB_REGISTER1F=0x1F,
	MODBUS_HOLD_TAB_REGISTER20=0x20,
	MODBUS_HOLD_TAB_REGISTER23=0x23,
	MODBUS_HOLD_TAB_REGISTER24=0x24,
	MODBUS_HOLD_TAB_REGISTER25=0x25,
	MODBUS_HOLD_TAB_REGISTER27=0x27,
	MODBUS_HOLD_TAB_REGISTER30=0x30,
	MODBUS_HOLD_TAB_REGISTER31=0x31,
	MODBUS_HOLD_TAB_REGISTER32=0x32,
	MODBUS_HOLD_TAB_REGISTER35=0x35,
	MODBUS_HOLD_TAB_REGISTER39=0x39
};
#endif //DLP_DLP_DLPCOMMAND_H_
